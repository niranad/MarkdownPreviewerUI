{"version":3,"sources":["preview.js","editor.js","App.js","index.js"],"names":["Preview","input","id","className","dangerouslySetInnerHTML","__html","marked","sanitize","gfm","breaks","Editor","handleChange","value","onChange","name","cols","rows","App","props","state","editorMaxView","previewMaxView","this","setState","document","getElementById","style","width","height","top","event","target","addEventListener","togglePreview","toggleEditor","removeEventListener","bind","React","Component","ReactDOM","render","StrictMode"],"mappings":"uQAEaA,EAAU,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAMxB,OACE,sBAAKC,GAAG,cAAR,UACE,sBAAKC,UAAU,OAAf,UACE,sBAAMD,GAAG,iBAAT,kBACA,gDAEF,qBAAKA,GAAG,UAAUE,wBATb,CAAEC,OADOC,IAAOL,EAAO,CAAEM,UAAU,EAAMC,KAAK,EAAMC,QAAQ,WCJ1DC,EAAS,SAAC,GAA6B,IAA3BT,EAA0B,EAA1BA,MAAOU,EAAmB,EAAnBA,aAC9B,OACE,sBAAKT,GAAG,aAAR,UACE,sBAAKC,UAAU,OAAf,UACE,sBAAMD,GAAG,gBAAT,kBACA,+CAEF,0BACEA,GAAG,SACHU,MAAOX,EACPY,SAAUF,EACVG,KAAK,WACLC,KAAK,KACLC,KAAK,WC2GEC,G,wDAlHb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXlB,MAAO,GACPmB,eAAe,EACfC,gBAAgB,GALD,E,gDASnB,WACEC,KAAKC,UAAS,SAACJ,GAAD,MAAY,CAAEC,eAAgBD,EAAMC,kBAC9CE,KAAKH,MAAMC,eACbI,SAASC,eAAe,cAAcC,MAAMC,MAAQ,QACpDH,SAASC,eAAe,cAAcC,MAAME,OAAS,SAErDJ,SAASC,eAAe,cAAcC,MAAME,OAAS,S,2BAIzD,WACEN,KAAKC,UAAS,SAACJ,GAAD,MAAY,CAAEE,gBAAiBF,EAAME,mBAC/CC,KAAKH,MAAME,gBACbG,SAASC,eAAe,eAAeC,MAAMC,MAAQ,QACrDH,SAASC,eAAe,eAAeC,MAAME,OAAS,SAEtDJ,SAASC,eAAe,eAAeC,MAAMG,IAAM,Q,+BAIvD,WA6CEP,KAAKC,SAAS,CACZtB,MA7CmB,4vD,0BAiDvB,SAAa6B,GACXR,KAAKC,SAAS,CACZtB,MAAO6B,EAAMC,OAAOnB,QAGtBY,SACGC,eAAe,kBACfO,iBAAiB,QAASV,KAAKW,eAClCT,SACGC,eAAe,iBACfO,iBAAiB,QAASV,KAAKY,gB,kCAGpC,WACEV,SACGC,eAAe,kBACfU,oBAAoB,QAASb,KAAKW,eACrCT,SACGC,eAAe,iBACfU,oBAAoB,QAASb,KAAKY,gB,oBAGvC,WACE,OACE,sBAAK/B,UAAU,gBAAf,UACE,cAAC,EAAD,CACEF,MAAOqB,KAAKH,MAAMlB,MAClBU,aAAcW,KAAKX,aAAayB,KAAKd,QAEvC,cAAC,EAAD,CAASrB,MAAOqB,KAAKH,MAAMlB,e,GA7GjBoC,IAAMC,YCAxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjB,SAASC,eAAe,W","file":"static/js/main.e1147bb3.chunk.js","sourcesContent":["import marked from 'marked'\r\n\r\nexport const Preview = ({ input }) => {\r\n  const getMarkdownText = () => {\r\n    var rawMarkup = marked(input, { sanitize: true, gfm: true, breaks: true })\r\n    return { __html: rawMarkup }\r\n  }\r\n\r\n  return (\r\n    <div id=\"preview-div\">\r\n      <div className=\"head\">\r\n        <span id=\"preview-toggle\">&times;</span>\r\n        <header>Preview</header>\r\n      </div>\r\n      <div id=\"preview\" dangerouslySetInnerHTML={getMarkdownText()} />\r\n    </div>\r\n  )\r\n}\r\n","export const Editor = ({ input, handleChange }) => {\r\n  return (\r\n    <div id=\"editor-div\">\r\n      <div className=\"head\">\r\n        <span id=\"editor-toggle\">&times;</span>\r\n        <header>Editor</header>\r\n      </div>\r\n      <textarea\r\n        id=\"editor\"\r\n        value={input}\r\n        onChange={handleChange}\r\n        name=\"markdown\"\r\n        cols=\"30\"\r\n        rows=\"10\"\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\nimport { Preview } from './preview'\nimport { Editor } from './editor'\nimport './App.css'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      input: '',\n      editorMaxView: false,\n      previewMaxView: false,\n    }\n  }\n\n  toggleEditor() {\n    this.setState((state) => ({ editorMaxView: !state.editorMaxView }))\n    if (this.state.editorMaxView) {\n      document.getElementById('editor-div').style.width = '100vw'\n      document.getElementById('editor-div').style.height = '100vh'\n    } else {\n      document.getElementById('editor-div').style.height = '40vh'\n    }\n  }\n\n  togglePreview() {\n    this.setState((state) => ({ previewMaxView: !state.previewMaxView }))\n    if (this.state.previewMaxView) {\n      document.getElementById('preview-div').style.width = '100vw'\n      document.getElementById('preview-div').style.height = '100vh'\n    } else {\n      document.getElementById('preview-div').style.top = '4vh'\n    }\n  }\n\n  componentDidMount() {\n    const defaultMarkdown = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n\n### And here's a smaller sub-heading...\n\nHere's some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is a multiline code:                                                               \n                                                                                           \nfunction anotherExample(firstLine, lastLine) {                                             \n  if (firstLine =='\\`\\`\\`' && lastLine == '\\`\\`\\`') {                                            \n    return multiLineCode;                                                                  \n  }                                                                                        \n}                                                                                          \n\\`\\`\\`\n\nYou can also make text **bold**... whoa!                                                     \nOr _italic_.                                                                                       \nOr... wait a minute... **_both!_**.                                                          \nAnd you can cross stuff out ~~sorry, made a mistake~~.\n\nThere's also [links](https://www.codepen.io/niranad), and\n> Block Quotes!\n\nAnd if you want to get really creative, event tables:\n\nWild Header | Crazy Header | Another Header\n------------ | ----------------| --------------\nYour content can | be here and it | can be here\nAnd here. | Okay | I think we get it.\n\n- And of course there are lists\n  - Some are bulleted\n    - With different identation levels.\n      - That look like this.\n\n1. And there are numbered lists too.\n2. Second list.\n3. That's enough! Let's not forget images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)`\n\n    this.setState({\n      input: defaultMarkdown,\n    })\n  }\n\n  handleChange(event) {\n    this.setState({\n      input: event.target.value,\n    })\n\n    document\n      .getElementById('preview-toggle')\n      .addEventListener('click', this.togglePreview)\n    document\n      .getElementById('editor-toggle')\n      .addEventListener('click', this.toggleEditor)\n  }\n\n  componentWillUnmount() {\n    document\n      .getElementById('preview-toggle')\n      .removeEventListener('click', this.togglePreview)\n    document\n      .getElementById('editor-toggle')\n      .removeEventListener('click', this.toggleEditor)\n  }\n\n  render() {\n    return (\n      <div className=\"container-div\">\n        <Editor\n          input={this.state.input}\n          handleChange={this.handleChange.bind(this)}\n        />\n        <Preview input={this.state.input} />\n      </div>\n    )\n  }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}