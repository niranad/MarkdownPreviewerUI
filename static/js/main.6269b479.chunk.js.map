{"version":3,"sources":["preview.js","editor.js","App.js","index.js"],"names":["Preview","input","isMaxView","previewToggler","id","className","style","border","onClick","dangerouslySetInnerHTML","__html","marked","sanitize","gfm","breaks","Editor","handleChange","editorToggler","value","onChange","name","cols","rows","App","props","toggleEditor","state","editorMaxView","document","getElementById","width","height","setState","togglePreview","previewMaxView","prevStyle","window","innerWidth","event","target","this","React","Component","ReactDOM","render","StrictMode"],"mappings":"uQAEaA,EAAU,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,UAAWC,EAAqB,EAArBA,eAM1C,OACE,sBAAKC,GAAG,cAAR,UACE,sBAAKC,UAAU,OAAf,UACE,sBACED,GAAG,iBACHE,MAAO,CAAEC,OAAQ,QACjBC,QAASL,EAHX,SAKE,mBACEE,UACEH,EAAY,uBAAyB,2BAI3C,gDAEF,qBAAKE,GAAG,UAAUK,wBAnBb,CAAEC,OADOC,IAAOV,EAAO,CAAEW,UAAU,EAAMC,KAAK,EAAMC,QAAQ,WCJ1DC,EAAS,SAAC,GAAuD,IAArDd,EAAoD,EAApDA,MAAOe,EAA6C,EAA7CA,aAAcd,EAA+B,EAA/BA,UAAWe,EAAoB,EAApBA,cACvD,OACE,sBAAKb,GAAG,aAAR,UACE,sBAAKC,UAAU,OAAf,UACE,sBACED,GAAG,gBACHE,MAAO,CAAEC,OAAQ,QACjBC,QAASS,EAHX,SAKE,mBACEZ,UACEH,EAAY,uBAAyB,2BAI3C,+CAEF,0BACEE,GAAG,SACHc,MAAOjB,EACPkB,SAAUH,EACVI,KAAK,WACLC,KAAK,KACLC,KAAK,WC6FEC,G,wDA9Gb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAQRC,aAAe,WACR,EAAKC,MAAMC,eAIdC,SAASC,eAAe,cAAcvB,MAAMwB,MAAQ,OACpDF,SAASC,eAAe,cAAcvB,MAAMyB,OAAS,SAJrDH,SAASC,eAAe,cAAcvB,MAAMwB,MAAQ,OACpDF,SAASC,eAAe,cAAcvB,MAAMyB,OAAS,QAKvD,EAAKC,UAAS,SAACN,GAAD,MAAY,CAAEC,eAAgBD,EAAMC,mBAjBjC,EAoBnBM,cAAgB,WACd,GAAK,EAAKP,MAAMQ,eAGT,CACL,IAAIC,EAAYP,SAASC,eAAe,eAAevB,MACnD8B,OAAOC,WAAa,IACtBF,EAAUL,MAAQ,OACTM,OAAOC,WAAa,MAC7BF,EAAUL,MAAQ,aAPpBF,SAASC,eAAe,eAAevB,MAAMwB,MAAQ,OACrDF,SAASC,eAAe,eAAevB,MAAMyB,OAAS,OASxD,EAAKC,UAAS,SAACN,GAAD,MAAY,CAAEQ,gBAAiBR,EAAMQ,oBAhClC,EAqFnBlB,aAAe,SAACsB,GACd,EAAKN,SAAS,CACZ/B,MAAOqC,EAAMC,OAAOrB,SArFtB,EAAKQ,MAAQ,CACXzB,MAAO,GACP0B,eAAe,EACfO,gBAAgB,GALD,E,qDAmCnB,WA6CEM,KAAKR,SAAS,CACZ/B,MA7CmB,4vD,oBAuDvB,WACE,OACE,sBAAKI,UAAU,gBAAf,UACE,cAAC,EAAD,CACEJ,MAAOuC,KAAKd,MAAMzB,MAClBe,aAAcwB,KAAKxB,aACnBd,UAAWsC,KAAKd,MAAMC,cACtBV,cAAeuB,KAAKf,eAEtB,cAAC,EAAD,CACExB,MAAOuC,KAAKd,MAAMzB,MAClBC,UAAWsC,KAAKd,MAAMQ,eACtB/B,eAAgBqC,KAAKP,uB,GAxGbQ,IAAMC,YCAxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjB,SAASC,eAAe,W","file":"static/js/main.6269b479.chunk.js","sourcesContent":["import marked from 'marked'\r\n\r\nexport const Preview = ({ input, isMaxView, previewToggler }) => {\r\n  const getMarkdownText = () => {\r\n    var rawMarkup = marked(input, { sanitize: true, gfm: true, breaks: true });\r\n    return { __html: rawMarkup };\r\n  };\r\n\r\n  return (\r\n    <div id='preview-div'>\r\n      <div className='head'>\r\n        <span\r\n          id='preview-toggle'\r\n          style={{ border: 'none' }}\r\n          onClick={previewToggler}\r\n        >\r\n          <i\r\n            className={\r\n              isMaxView ? 'fa-solid fa-minimize' : 'fa-solid fa-maximize'\r\n            }\r\n          />\r\n        </span>\r\n        <header>Preview</header>\r\n      </div>\r\n      <div id='preview' dangerouslySetInnerHTML={getMarkdownText()} />\r\n    </div>\r\n  );\r\n};\r\n","export const Editor = ({ input, handleChange, isMaxView, editorToggler }) => {\r\n  return (\r\n    <div id='editor-div'>\r\n      <div className='head'>\r\n        <span\r\n          id='editor-toggle'\r\n          style={{ border: 'none' }}\r\n          onClick={editorToggler}\r\n        >\r\n          <i\r\n            className={\r\n              isMaxView ? 'fa-solid fa-minimize' : 'fa-solid fa-maximize'\r\n            }\r\n          />\r\n        </span>\r\n        <header>Editor</header>\r\n      </div>\r\n      <textarea\r\n        id='editor'\r\n        value={input}\r\n        onChange={handleChange}\r\n        name='markdown'\r\n        cols='30'\r\n        rows='10'\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react'\nimport { Preview } from './preview'\nimport { Editor } from './editor'\nimport './App.css'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      editorMaxView: false,\n      previewMaxView: false,\n    };\n  }\n\n  toggleEditor = () => {\n    if (!this.state.editorMaxView) {\n      document.getElementById('editor-div').style.width = '95vw';\n      document.getElementById('editor-div').style.height = '95vh';\n    } else {\n      document.getElementById('editor-div').style.width = '50vw';\n      document.getElementById('editor-div').style.height = '40vh';\n    }\n    this.setState((state) => ({ editorMaxView: !state.editorMaxView }));\n  };\n\n  togglePreview = () => {\n    if (!this.state.previewMaxView) {\n      document.getElementById('preview-div').style.width = '97vw';\n      document.getElementById('preview-div').style.height = '97vh';\n    } else {\n      let prevStyle = document.getElementById('preview-div').style;\n      if (window.innerWidth > 880) {\n        prevStyle.width = '72vw';\n      } else if (window.innerWidth > 500) {\n        prevStyle.width = '82vw';\n      } \n    }\n    this.setState((state) => ({ previewMaxView: !state.previewMaxView }));\n  };\n\n  componentDidMount() {\n    const defaultMarkdown = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n\n### And here's a smaller sub-heading...\n\nHere's some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is a multiline code:                                                               \n                                                                                           \nfunction anotherExample(firstLine, lastLine) {                                             \n  if (firstLine =='\\`\\`\\`' && lastLine == '\\`\\`\\`') {                                            \n    return multiLineCode;                                                                  \n  }                                                                                        \n}                                                                                          \n\\`\\`\\`\n\nYou can also make text **bold**... whoa!                                                     \nOr _italic_.                                                                                       \nOr... wait a minute... **_both!_**.                                                          \nAnd you can cross stuff out ~~sorry, made a mistake~~.\n\nThere's also [links](https://www.codepen.io/niranad), and\n> Block Quotes!\n\nAnd if you want to get really creative, event tables:\n\nWild Header | Crazy Header | Another Header\n------------ | ----------------| --------------\nYour content can | be here and it | can be here\nAnd here. | Okay | I think we get it.\n\n- And of course there are lists\n  - Some are bulleted\n    - With different identation levels.\n      - That look like this.\n\n1. And there are numbered lists too.\n2. Second list.\n3. That's enough! Let's not forget images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)`;\n\n    this.setState({\n      input: defaultMarkdown,\n    });\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      input: event.target.value,\n    });\n  };\n\n  render() {\n    return (\n      <div className='container-div'>\n        <Editor\n          input={this.state.input}\n          handleChange={this.handleChange}\n          isMaxView={this.state.editorMaxView}\n          editorToggler={this.toggleEditor}\n        />\n        <Preview\n          input={this.state.input}\n          isMaxView={this.state.previewMaxView}\n          previewToggler={this.togglePreview}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}